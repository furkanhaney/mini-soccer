# Path: dev.py
import os

files = [f for f in os.listdir(".") if os.path.isfile(f) and f.endswith(".py")]
files.remove("main.py")
files.remove("policy.py")
files.remove("render_mp4.py")
files.remove("action.py")
files.sort()

with open("prompt.txt", "w") as f:
    for file in files:
        f.write(f"# Path: {file}\n")
        with open(file, "r") as g:
            f.write(g.read())
        f.write("\n")

# Path: environment.py
import time
import pickle
from state import State
from policy import Policy
from action import Actions


class Environment:
    def __init__(
        self,
        num_players: int,
        policies: list[Policy],
        tick_rate=60,
        target_framerate=60,
    ):
        self.num_players = num_players
        self.policies = policies
        self.state_history = []
        self.action_history = []
        self.state = State(num_players)
        self.tick_rate = tick_rate
        self.time_per_tick = 1.0 / tick_rate
        self.target_framerate = target_framerate
        self.delta_time = 1.0 / target_framerate

    def save_history(
        self, state_path="state_history.pkl", action_path="action_history.pkl"
    ):
        with open(state_path, "wb") as f:
            pickle.dump(self.state_history, f)
        with open(action_path, "wb") as f:
            pickle.dump(self.action_history, f)

    def load_history(
        self, state_path="state_history.pkl", action_path="action_history.pkl"
    ):
        with open(state_path, "rb") as f:
            self.state_history = pickle.load(f)
        with open(action_path, "rb") as f:
            self.action_history = pickle.load(f)

    def run_game(self, run_time=30):
        end_time = time.time() + run_time
        last_time = time.time()
        next_tick = time.time()

        while time.time() < end_time:
            current_time = time.time()
            self.delta_time = current_time - last_time

            self.tick(self.delta_time)

            next_tick += self.time_per_tick
            sleep_time = next_tick - current_time

            if sleep_time > 0:
                time.sleep(sleep_time)

            last_time = current_time

    def tick(self, delta_time):
        actions = Actions(self.num_players, action_dim=5)
        actions.set_action(0, self.policies[0].get_action(self.state))
        actions.set_action(1, self.policies[1].get_action(self.state))
        self.state.update(actions, delta_time)
        self.state_history.append(self.state.to_numpy())
        self.action_history.append(actions.to_numpy())

    def render(self, renderer):
        renderer.render(self.state.to_numpy())


class RenderVideo:
    def __init__(self, game_states, resolution, framerate, video_path, verbose=False):
        pass

    def render(self):
        pass

# Path: render.py
import pygame
import numpy as np
from state import PLAYER_RADIUS, BALL_RADIUS


class PygameRender:
    def __init__(self, resolution):
        self.resolution = resolution
        self.screen = pygame.display.set_mode(resolution, vsync=1)

    def decompose_state(self, state):
        player_positions = state.player_positions
        ball_position = state.ball_position
        return player_positions, ball_position

    def draw_borders(self):
        rect_borders = [
            (50, 50, self.resolution[0] - 50, 10),
            (50, 50, 10, self.resolution[1] - 50),
            (50, self.resolution[1] - 50, self.resolution[0] - 50, 10),
            (self.resolution[0] - 50, 50, 10, self.resolution[1] - 50),
        ]
        for rbd in rect_borders:
            pygame.draw.rect(self.screen, (255, 255, 255), rbd)

        # Draw goalposts
        goalpost_height = int(self.resolution[1] * 0.25)
        goalpost_width = int(self.resolution[0] * 0.20)

        # Inner rectangle size
        inner_goalpost_width = goalpost_width - 10
        inner_goalpost_height = goalpost_height - 10

        # Left goalpost (Outer White, Inner Green)
        pygame.draw.rect(
            self.screen,
            (255, 255, 255),
            (
                0,
                (self.resolution[1] - goalpost_height) // 2,
                goalpost_width,
                goalpost_height,
            ),
        )
        pygame.draw.rect(
            self.screen,
            (0, 128, 0),
            (
                5,
                ((self.resolution[1] - goalpost_height) // 2) + 5,
                inner_goalpost_width,
                inner_goalpost_height,
            ),
        )

        # Right goalpost (Outer White, Inner Green)
        pygame.draw.rect(
            self.screen,
            (255, 255, 255),
            (
                self.resolution[0] - goalpost_width,
                (self.resolution[1] - goalpost_height) // 2,
                goalpost_width,
                goalpost_height,
            ),
        )
        pygame.draw.rect(
            self.screen,
            (0, 128, 0),
            (
                self.resolution[0] - goalpost_width + 5,
                ((self.resolution[1] - goalpost_height) // 2) + 5,
                inner_goalpost_width,
                inner_goalpost_height,
            ),
        )

    def draw_frame(self, state):
        player_positions, ball_position = self.decompose_state(state)

        # Fill the background with green
        self.screen.fill((0, 128, 0))

        # Draw the borders and goalposts
        self.draw_borders()

        # Draw the center circle
        pygame.draw.circle(
            self.screen,
            (255, 255, 255),
            (self.resolution[0] // 2, self.resolution[1] // 2),
            100,
            5,
        )

        # Calculate the scaling factors for x and y axis
        scale_x, scale_y = self.resolution[0], self.resolution[1]

        # Draw players and ball
        for idx, position in enumerate(player_positions):
            x, y = (position * np.array([scale_x, scale_y])).astype(int)
            color = (255, 0, 0) if idx == 0 else (0, 0, 255)
            pygame.draw.circle(self.screen, color, (x, y), int(PLAYER_RADIUS * scale_x))

        ball_x, ball_y = (ball_position * np.array([scale_x, scale_y])).astype(int)
        pygame.draw.circle(
            self.screen, (255, 255, 255), (ball_x, ball_y), int(BALL_RADIUS * scale_x)
        )

    def render(self, state):
        for state in [state]:
            self.screen.fill((0, 0, 0))
            self.draw_frame(state)
            pygame.display.update()

# Path: state.py
import numpy as np
from action import Actions

PLAYER_ACCELERATION = 1
MAX_PLAYER_SPEED = 1

PLAYER_RADIUS = 0.02
PLAYER_MASS = 5
PLAYER_FRICTION = 0.01

BALL_RADIUS = 0.01
BALL_MASS = 1
BALL_FRICTION = 0.01

ELASTICITY = 1.0


class State:
    def __init__(self, num_players: int):
        self.player_positions = np.array([[0.3, 0.5], [0.7, 0.5]])
        self.player_velocities = np.zeros((num_players, 2))
        self.ball_position = np.array([0.5, 0.5])
        self.ball_velocity = np.zeros(2)
        self.num_players = num_players

    def limit_speed(self, velocity: np.ndarray) -> np.ndarray:
        speed = np.linalg.norm(velocity)
        if speed > MAX_PLAYER_SPEED:
            return (velocity / speed) * MAX_PLAYER_SPEED
        return velocity

    def get_friction(self, velocity: np.ndarray, friction: float) -> np.ndarray:
        return velocity * (1 - friction)

    def update_player_positions_and_velocities(
        self, player_actions: Actions, delta_time: float
    ):
        action_array = player_actions.to_numpy().reshape(self.num_players, -1)

        # Apply acceleration
        self.player_velocities += action_array[:, :2] * delta_time * PLAYER_ACCELERATION

        # Apply friction
        self.player_velocities -= (
            self.get_friction(self.player_velocities, PLAYER_FRICTION) * delta_time
        )

        # Limit speed and update position
        self.player_velocities = np.apply_along_axis(
            self.limit_speed, 1, self.player_velocities
        )
        self.player_positions += self.player_velocities * delta_time
        self.player_positions = np.clip(self.player_positions, 0.05, 0.95)

    def resolve_player_collisions(self):
        for i in range(self.num_players):
            for j in range(i + 1, self.num_players):
                distance = np.linalg.norm(
                    self.player_positions[i] - self.player_positions[j]
                )
                if distance < 2 * PLAYER_RADIUS:
                    overlap = 2 * PLAYER_RADIUS - distance
                    normal = (
                        self.player_positions[i] - self.player_positions[j]
                    ) / distance

                    self.player_positions[i] += (overlap / 2) * normal
                    self.player_positions[j] -= (overlap / 2) * normal

    def resolve_collisions(self, elasticity: float):
        for i in range(self.num_players):
            player_pos = self.player_positions[i]
            distance_to_ball = np.linalg.norm(player_pos - self.ball_position)

            if distance_to_ball < (BALL_RADIUS + PLAYER_RADIUS):
                overlap = BALL_RADIUS + PLAYER_RADIUS - distance_to_ball
                normal = (player_pos - self.ball_position) / distance_to_ball

                # Move the positions to resolve the overlap
                self.player_positions[i] += (overlap / 2) * normal
                self.ball_position -= (overlap / 2) * normal

                # Calculate velocities along the normal direction for both ball and player
                ball_speed_normal = np.dot(self.ball_velocity, normal)
                player_speed_normal = np.dot(self.player_velocities[i], normal)

                # Calculate new speeds along normal after collision using mass
                total_mass = PLAYER_MASS + BALL_MASS
                new_ball_speed_normal = (
                    (2 * PLAYER_MASS / total_mass) * player_speed_normal
                ) + ((1 - 2 * PLAYER_MASS / total_mass) * ball_speed_normal)
                new_player_speed_normal = (
                    (2 * BALL_MASS / total_mass) * ball_speed_normal
                ) + ((1 - 2 * BALL_MASS / total_mass) * player_speed_normal)

                # Apply the elasticity factor
                change_in_ball_speed_normal = new_ball_speed_normal - ball_speed_normal
                change_in_player_speed_normal = (
                    new_player_speed_normal - player_speed_normal
                )

                new_ball_speed_normal = (
                    ball_speed_normal + elasticity * change_in_ball_speed_normal
                )
                new_player_speed_normal = (
                    player_speed_normal + elasticity * change_in_player_speed_normal
                )

                # Update the velocities of the ball and player
                self.ball_velocity += (
                    new_ball_speed_normal - ball_speed_normal
                ) * normal
                self.player_velocities[i] += (
                    new_player_speed_normal - player_speed_normal
                ) * normal

    def update_ball_position(self, delta_time: float):
        # Apply friction to ball
        self.ball_velocity -= (
            self.get_friction(self.ball_velocity, BALL_FRICTION) * delta_time
        )
        self.ball_position += self.ball_velocity * delta_time

        # Detect and resolve collisions with walls
        for i in range(2):  # Loop over x and y axes
            if (
                self.ball_position[i] <= BALL_RADIUS
                or self.ball_position[i] >= 1 - BALL_RADIUS
            ):
                self.ball_velocity[i] = -self.ball_velocity[i]
                # Reposition the ball to avoid overlap with the wall
                self.ball_position[i] = np.clip(
                    self.ball_position[i], BALL_RADIUS, 1 - BALL_RADIUS
                )

        self.ball_position = np.clip(self.ball_position, BALL_RADIUS, 1 - BALL_RADIUS)

    def update(self, player_actions: Actions, delta_time: float):
        self.update_player_positions_and_velocities(player_actions, delta_time)
        self.resolve_collisions(ELASTICITY)
        self.resolve_player_collisions()
        self.update_ball_position(delta_time)

    def to_numpy(self):
        arr = np.concatenate(
            [
                self.player_positions.flatten(),
                self.player_velocities.flatten(),
                self.ball_position.flatten(),
                self.ball_velocity.flatten(),
            ]
        )
        return arr

